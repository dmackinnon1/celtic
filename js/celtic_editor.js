"use strict";
/*
* There are three parts to the knot editor
* - a specialized KnotDisplay class
* - some helper functions that interact with the SVG generated by the class
* - a variable "interactive" which holds data used by the live editor.
*/

class EditDisplay extends KnotDisplay {
	
	constructor(g, scale,foreground = "white", background = "black"){
		super(g, scale, foreground, background);
		this.source = null;
	}
	
	primaryGrid(){
		for (let p in this.g.points){
			let point = this.g.points[p];
			if (point.isOnSecondary()) {
				continue;
			}
			let dot = new Bldr("circle").att("cx",point.x*this.scale).att("cy", point.y*this.scale);
			dot.att("onclick", "primaryClick(event)");
			dot.att("onmouseover","primaryMouseOver(event)");
      		dot.att("onmouseout","primaryMouseOut(event)");
      		dot.att("data_x",point.x);
      		dot.att("data_y", point.y);			
			dot.att("r",this.scale/8).att("stroke-width",0).att("fill","grey");
			this.svgBldr.elem(dot);
		}
		return this; 
	}

	secondaryGrid(){
		for (let p in this.g.nodes){
			let point = this.g.nodes[p];
			let dot = new Bldr("circle").att("cx",point.x*this.scale).att("cy", point.y*this.scale);
			dot.att("r",this.scale/4).att("stroke-width",this.scale/8).att("fill",this.backgroundColor);
			dot.att("onclick", "secondaryClick(event)");
			dot.att("onmouseover","secondaryMouseOver(event)");
      		dot.att("onmouseout","secondaryMouseOut(event)");
      		dot.att("data_x",point.x);
      		dot.att("data_y", point.y);
			this.svgBldr.elem(dot);
		}
		return this; 
	}

	removeJunctionAt(i,j){
		this.g.removeJunctionAt(i,j);
		refreshInteractive();
	}

	setSourceOrTarget(i,j){
		let other = this.g.nodeAt(i,j);
		if (this.source == null){
			this.source = other;
		} else {
			let j = null;
			if (this.source.isWestNeighbor(other) && other.east().junctions.length == 0){
					j = new Junction(this.source, other.east(), other, "EW");
			} else if (this.source.isEastNeighbor(other) && other.west().junctions.length == 0){
				j = new Junction(this.source, other.west(), other, "EW");
			} else if (this.source.isNorthNeighbor(other) && other.south().junctions.length == 0){
				j = new Junction(this.source, other.south(), other, "NS");
			} else if(this.source.isSouthNeighbor(other)&& other.north().junctions.length == 0){
				j = new Junction(this.source, other.north(), other, "NS");
			} else{
				//this.source = other;
				this.g.boxFrame(this.source, other);
				this.source = null;
				this.g.calc();
				refreshInteractive();
			}
			if (j != null){
				this.source = null;
				this.g.junctions.push(j);
				this.g.calc();
				refreshInteractive();
			}
		}
	}

}

//functions and singleton to accompany EditableKnotSVG
let interactive = {};
interactive.knot = null;
interactive.mode = 'show'; // edit or show
interactive.format = 'negative'; // positive | negative
interactive.displayObject = null;
interactive.displayDiv = null;

/*
* Functions used with EditDisply
*/
function secondaryClick(event){
	let dot = event.srcElement;
	interactive.displayObject.setSourceOrTarget(
		dot.getAttribute("data_x"),
		dot.getAttribute("data_y"));
};

function primaryClick(event){
	let dot = event.srcElement;
	interactive.displayObject.removeJunctionAt(
		dot.getAttribute("data_x"),
		dot.getAttribute("data_y"));
};

function secondaryMouseOver(event){
	event.srcElement.setAttribute('opacity', '0.5');
};

function secondaryMouseOut(event){
	event.srcElement.setAttribute('opacity', '1');
};

function primaryMouseOver(event){
	event.srcElement.setAttribute('opacity', '0.5');
};

function primaryMouseOut(event){
	event.srcElement.setAttribute('opacity', '1');
};


function refreshInteractive(){
	if (interactive.mode == 'edit'){		
		interactive.displayObject = new EditDisplay(interactive.knot, interactive.scale);
		interactive.displayDiv.innerHTML = interactive.displayObject.init().build();			
	} else {
		if (interactive.format == 'positive'){
			interactive.displayObject = 
				new RibbonKnotDisplay(interactive.knot, interactive.scale, 
					interactive.foreground, interactive.background);
			interactive.displayDiv.innerHTML = 
				interactive.displayObject.init().build();
		} else {
			interactive.displayObject = new BeveledKnotDisplay(interactive.knot, interactive.scale,
				interactive.foreground, interactive.background);		
			interactive.displayDiv.innerHTML = 
				interactive.displayObject.init().build();
				//interactive.knot.init().smoothedLines().junctions().nodes().lines().build();
		}
	}
}
